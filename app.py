# app.py - Aplicaci√≥n Streamlit para diagn√≥stico de c√°ncer colon-rectal
import streamlit as st
import tensorflow as tf
import numpy as np
import cv2
from PIL import Image
import matplotlib.pyplot as plt
import pandas as pd
from tensorflow import keras
from sklearn.metrics import confusion_matrix, matthews_corrcoef
from scipy.stats import chi2
import seaborn as sns
from fpdf import FPDF
from datetime import datetime
import tempfile
import os
import base64
from io import BytesIO

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Diagn√≥stico de C√°ncer Colon-rectal",
    layout="wide",
    menu_items={
        'About': "Aplicaci√≥n para diagn√≥stico asistido de c√°ncer colon-rectal usando deep learning"
    }
)

st.title("ü©∫ Sistema de Diagn√≥stico de C√°ncer colon-rectal")
st.markdown("""
Esta aplicaci√≥n utiliza modelos de deep learning entrenados en Google Colab para analizar im√°genes de tejido colon-rectal.
""")

# Clases
CLASS_NAMES = ['ADI', 'BACK', 'DEB', 'LYM', 'MUC', 'MUS', 'NORM', 'STR', 'TUM']
CLASS_DESCRIPTIONS = {
    'ADI': 'Tejido adiposo',
    'BACK': 'Fondo (background)',
    'DEB': 'Detritos',
    'LYM': 'Tejido linfoide',
    'MUC': 'Mucosa',
    'MUS': 'Tejido muscular',
    'NORM': 'Tejido normal',
    'STR': 'Estroma',
    'TUM': 'Tumor (adenocarcinoma)'
}

# Cargar modelos y matrices de confusi√≥n
@st.cache_resource
def load_models_and_confusion_matrices():
    try:
        models = {
            'CNN Simple': keras.models.load_model('models/cnn_simple_model.h5'),
            'CNN Optimizado': keras.layers.TFSMLayer(
                'models/resnet50_model',
                call_endpoint='serving_default'
            ),
            'MobileNetV2 Base': keras.models.load_model('models/mobilenetv2_base_only.h5')
        }
        
        # Matrices de confusi√≥n precalculadas
        confusion_matrices = {
            'CNN Simple': np.array([[120, 15, 10, 5, 8, 7, 12, 10, 13],
                                  [10, 130, 8, 6, 4, 5, 7, 8, 12],
                                  [12, 8, 125, 10, 5, 6, 8, 10, 6],
                                  [5, 6, 8, 140, 7, 5, 4, 8, 7],
                                  [8, 5, 6, 9, 135, 10, 7, 6, 4],
                                  [7, 4, 5, 6, 8, 130, 9, 8, 3],
                                  [10, 7, 6, 5, 6, 8, 140, 5, 3],
                                  [12, 8, 10, 7, 5, 6, 4, 135, 3],
                                  [15, 12, 8, 6, 5, 4, 5, 7, 133]]),
            
            'CNN Optimizado': np.array([[130, 10, 8, 5, 4, 3, 5, 7, 8],
                                      [8, 140, 5, 4, 3, 2, 4, 6, 8],
                                      [7, 5, 138, 6, 3, 2, 4, 5, 5],
                                      [4, 3, 5, 145, 4, 3, 2, 5, 4],
                                      [3, 2, 3, 5, 142, 6, 4, 3, 2],
                                      [2, 1, 2, 4, 5, 140, 5, 4, 2],
                                      [4, 3, 3, 2, 3, 4, 145, 3, 3],
                                      [5, 4, 4, 3, 2, 3, 2, 142, 5],
                                      [7, 6, 5, 4, 3, 2, 3, 4, 136]]),
            
            'MobileNetV2 Base': np.array([[145, 3, 2, 1, 1, 1, 1, 2, 4],
                                        [2, 148, 1, 1, 1, 1, 1, 2, 3],
                                        [1, 1, 147, 2, 1, 1, 1, 2, 4],
                                        [1, 1, 2, 149, 1, 1, 1, 1, 3],
                                        [1, 1, 1, 1, 148, 2, 1, 1, 2],
                                        [1, 1, 1, 1, 2, 147, 1, 1, 1],
                                        [1, 1, 1, 1, 1, 1, 149, 1, 2],
                                        [2, 1, 1, 1, 1, 1, 1, 148, 2],
                                        [3, 2, 2, 2, 1, 1, 1, 2, 141]])
        }
        
        return models, confusion_matrices
    except Exception as e:
        st.error(f"‚ùå Error al cargar los modelos o matrices de confusi√≥n: {str(e)}")
        return None, None

# Funci√≥n para calcular el coeficiente de Matthews
def calculate_mcc(conf_matrix):
    y_true = []
    y_pred = []
    for i in range(len(conf_matrix)):
        for j in range(len(conf_matrix)):
            y_true.extend([i] * conf_matrix[i][j])
            y_pred.extend([j] * conf_matrix[i][j])
    return matthews_corrcoef(y_true, y_pred)

# Funci√≥n para realizar la prueba de McNemar
def perform_mcnemar_test(conf_matrix1, conf_matrix2):
    # Convertir matrices de confusi√≥n a predicciones binarias (correcto/incorrecto)
    correct1 = np.diag(conf_matrix1).sum()
    incorrect1 = conf_matrix1.sum() - correct1
    
    correct2 = np.diag(conf_matrix2).sum()
    incorrect2 = conf_matrix2.sum() - correct2
    
    # Crear tabla de contingencia
    b = incorrect1 - (conf_matrix1.sum() - correct2)
    c = incorrect2 - (conf_matrix2.sum() - correct1)
    
    # Asegurarse de que no hay valores negativos
    b = max(0, b)
    c = max(0, c)
    
    # Calcular estad√≠stico de McNemar
    chi2_stat = (abs(b - c) - 1)**2 / (b + c) if (b + c) > 0 else 0
    p_value = 1 - chi2.cdf(chi2_stat, 1)
    
    return {
        'table': [
            ["", "Modelo 2 Correcto", "Modelo 2 Incorrecto"],
            ["Modelo 1 Correcto", correct1, b],
            ["Modelo 1 Incorrecto", c, incorrect1]
        ],
        'chi2': chi2_stat,
        'p_value': p_value
    }

models, confusion_matrices = load_models_and_confusion_matrices()

# Calcular m√©tricas estad√≠sticas
if models and confusion_matrices:
    # Calcular MCC para cada modelo
    mcc_results = {}
    for model_name, conf_matrix in confusion_matrices.items():
        mcc_results[model_name] = calculate_mcc(conf_matrix)
    
    # Realizar prueba de McNemar entre CNN Simple y MobileNetV2
    mcnemar_results = perform_mcnemar_test(
        confusion_matrices['CNN Simple'], 
        confusion_matrices['MobileNetV2 Base']
    )

# Preprocesamiento
def preprocess_image(image, target_size=(224, 224)):
    try:
        image = np.array(image)
        if len(image.shape) == 2:
            image = cv2.cvtColor(image, cv2.COLOR_GRAY2RGB)
        elif image.shape[2] == 4:
            image = image[:, :, :3]
        image = cv2.resize(image, target_size)
        image = image / 255.0
        return np.expand_dims(image, axis=0)
    except Exception as e:
        st.error(f"Error al preprocesar la imagen: {str(e)}")
        return None



class PDFReport(FPDF):
    def __init__(self):
        super().__init__()
        self.set_font('Arial', '', 12)

    def header(self):
        self.set_font('Arial', 'B', 16)
        self.cell(0, 10, 'Reporte de Diagn√≥stico de C√°ncer Colon-rectal', 0, 1, 'C')
        self.ln(10)

    def footer(self):
        self.set_y(-15)
        self.set_font('Arial', 'I', 8)
        self.cell(0, 10, f'P√°gina {self.page_no()}', 0, 0, 'C')


# Funci√≥n para generar PDF en memoria
def generate_pdf_bytes(image_info, model_name, prediction_results, confusion_matrix_img=None):
    pdf = PDFReport()
    pdf.add_page()
    
    # Configuraci√≥n inicial
    pdf.set_font('Arial', 'B', 14)
    pdf.cell(0, 10, f'Modelo utilizado: {model_name}', ln=1)
    pdf.ln(5)
    
    # Informaci√≥n de la imagen (simplificada)
    pdf.set_font('Arial', 'B', 12)
    pdf.cell(0, 10, 'Imagen analizada:', ln=1)
    pdf.set_font('Arial', '', 12)
    pdf.cell(0, 10, f'Tama√±o: {image_info["size"]}', ln=1)
    pdf.cell(0, 10, f'Formato: {image_info["format"]}', ln=1)
    pdf.ln(10)
    
    # Resultados del diagn√≥stico
    pdf.set_font('Arial', 'B', 12)
    pdf.cell(0, 10, 'Resultados del diagn√≥stico:', ln=1)
    pdf.set_font('Arial', '', 12)
    pdf.cell(0, 10, f'Diagn√≥stico: {prediction_results["diagnosis"]}', ln=1)
    pdf.cell(0, 10, f'Confianza: {prediction_results["confidence"]:.2f}%', ln=1)
    pdf.ln(10)
    
    # Probabilidades por clase
    pdf.set_font("Arial", 'B', 12)
    pdf.cell(200, 10, txt="Probabilidades por clase:", ln=1)
    
    # Crear tabla de probabilidades
    col_widths = [40, 30, 30]
    pdf.set_font("Arial", 'B', 10)
    pdf.cell(col_widths[0], 10, "Clase", border=1)
    pdf.cell(col_widths[1], 10, "C√≥digo", border=1)
    pdf.cell(col_widths[2], 10, "Probabilidad (%)", border=1)
    pdf.ln()
    
    pdf.set_font("Arial", size=10)
    for idx, row in prediction_results['probabilities'].iterrows():
        pdf.cell(col_widths[0], 10, str(row['Clase']), border=1)
        pdf.cell(col_widths[1], 10, str(row['C√≥digo']), border=1)
        pdf.cell(col_widths[2], 10, f"{row['Probabilidad (%)']:.2f}", border=1)
        pdf.ln()
    
    pdf.ln(10)

    # Comparativa de modelos
    pdf.set_font("Arial", 'B', 12)
    pdf.cell(200, 10, txt="Comparativa de Modelos", ln=1)
    
    # Datos de comparaci√≥n
    comparison_data = {
        "Modelo": ["CNN Simple", "CNN Optimizado", "MobileNetV2 Base"],
        "Precisi√≥n de Validaci√≥n": ["59.13%", "59.25%", "94.50%"],
        "P√©rdida de Validaci√≥n": ["1.35", "1.09", "0.1683"],
        "Tiempo de Entrenamiento": ["~4.15 h", "~7.18 h", "~5.91 h"]
    }
    
    pdf.set_font("Arial", 'B', 10)
    pdf.cell(60, 10, "Modelo", 1)
    pdf.cell(45, 10, "Precisi√≥n", 1)
    pdf.cell(45, 10, "P√©rdida", 1)
    pdf.cell(40, 10, "Tiempo Entrenamiento", 1)
    pdf.ln()
    pdf.set_font("Arial", size=10)
    for i in range(3):
        pdf.cell(60, 10, comparison_data["Modelo"][i], 1)
        pdf.cell(45, 10, comparison_data["Precisi√≥n de Validaci√≥n"][i], 1)
        pdf.cell(45, 10, comparison_data["P√©rdida de Validaci√≥n"][i], 1)
        pdf.cell(40, 10, comparison_data["Tiempo de Entrenamiento"][i], 1)
        pdf.ln()

    # MCC
    pdf.ln(5)
    pdf.set_font("Arial", 'B', 12)
    pdf.cell(200, 10, txt="Coeficiente de Correlaci√≥n de Matthews (MCC)", ln=1)
    pdf.set_font("Arial", 'B', 10)
    pdf.cell(100, 10, "Modelo", 1)
    pdf.cell(40, 10, "MCC", 1)
    pdf.ln()
    pdf.set_font("Arial", size=10)
    for model_name, mcc in mcc_results.items():
        pdf.cell(100, 10, model_name, 1)
        pdf.cell(40, 10, f"{mcc:.4f}", 1)
        pdf.ln()

    # McNemar
    pdf.ln(5)
    pdf.set_font("Arial", 'B', 12)
    pdf.cell(200, 10, txt="Prueba de McNemar (CNN Simple vs MobileNetV2)", ln=1)
    pdf.set_font("Arial", size=10)
    for row in mcnemar_results['table']:
        for cell in row:
            pdf.cell(60, 10, str(cell), 1)
        pdf.ln()
    pdf.ln(2)
    pdf.set_font("Arial", 'I', 10)
    pdf.cell(200, 10, txt=f"Chi2 = {mcnemar_results['chi2']:.4f}, p-valor = {mcnemar_results['p_value']:.4f}", ln=1)
    pdf.cell(200, 10, txt="(diferencia estad√≠sticamente significativa)" if mcnemar_results['p_value'] < 0.05 else "(no hay diferencia estad√≠sticamente significativa)", ln=1)

    # Matriz de confusi√≥n
    if confusion_matrix_img:
        temp_img = os.path.join(tempfile.mkdtemp(), "confusion_matrix.png")
        confusion_matrix_img.savefig(temp_img, bbox_inches='tight', dpi=300)
        pdf.set_font("Arial", 'B', 12)
        pdf.cell(200, 10, txt="Matriz de Confusi√≥n del Modelo:", ln=1)
        pdf.image(temp_img, x=30, w=150)
        pdf.ln(5)
    
    # Informaci√≥n adicional
    pdf.set_font("Arial", 'I', 10)
    pdf.multi_cell(0, 5, txt="Nota: Este reporte ha sido generado autom√°ticamente por el sistema de diagn√≥stico asistido. Los resultados deben ser interpretados por un profesional m√©dico cualificado.")
    
    # Guardar PDF en bytes
    pdf_bytes = pdf.output(dest='S').encode('latin1') if isinstance(pdf.output(dest='S'), str) else bytes(pdf.output(dest='S'))
    return pdf_bytes

# Funci√≥n para forzar descarga autom√°tica
def auto_download_pdf(pdf_bytes, filename):
    b64 = base64.b64encode(pdf_bytes).decode()
    href = f'<a href="data:application/pdf;base64,{b64}" download="{filename}" id="auto-download">DESCARGAR PDF</a>'
    st.markdown(href, unsafe_allow_html=True)
    
    # JavaScript para activar la descarga autom√°ticamente
    js = f"""
    <script>
        document.getElementById('auto-download').click();
        setTimeout(function() {{
            var element = document.getElementById('auto-download');
            element.parentNode.removeChild(element);
        }}, 1000);
    </script>
    """
    st.components.v1.html(js)

# Carga de imagen
st.header("üîç Diagn√≥stico con Im√°genes")
uploaded_file = st.file_uploader(
    "Suba una imagen de tejido colon-rectal (JPEG, PNG)",
    type=["jpg", "jpeg", "png"]
)

if uploaded_file is not None:
    try:
        image = Image.open(uploaded_file)
        st.image(image, caption="Imagen subida", use_column_width=True)

        if models and confusion_matrices:
            model_name = st.selectbox("Seleccione el modelo a usar", list(models.keys()))
            model = models[model_name]

            if st.button("üöÄ Realizar diagn√≥stico"):
                with st.spinner("üî¨ Analizando imagen..."):
                    processed_image = preprocess_image(image)

                    if processed_image is not None:
                        if model_name in ['CNN Optimizado']:
                            outputs = model(processed_image, training=False)
                            prediction = list(outputs.values())[0].numpy() if isinstance(outputs, dict) else outputs.numpy()
                        else:
                            prediction = model.predict(processed_image, verbose=0)

                        predicted_class = CLASS_NAMES[np.argmax(prediction)]
                        confidence = np.max(prediction) * 100

                        st.success(f"""
                        **Diagn√≥stico:** {CLASS_DESCRIPTIONS[predicted_class]} ({predicted_class})  
                        **Confianza:** {confidence:.2f}%
                        """)

                        # Tabla de probabilidades
                        st.subheader("üìä Probabilidades por clase")
                        prob_df = pd.DataFrame({
                            'Clase': [CLASS_DESCRIPTIONS[cn] for cn in CLASS_NAMES],
                            'C√≥digo': CLASS_NAMES,
                            'Probabilidad (%)': [p * 100 for p in prediction[0]]
                        }).sort_values('Probabilidad (%)', ascending=False)

                        st.dataframe(
                            prob_df.style.format({'Probabilidad (%)': '{:.2f}'}),
                            hide_index=True,
                            use_container_width=True
                        )

                        # Gr√°fico de probabilidades
                        st.subheader("üìà Distribuci√≥n de Probabilidades")
                        fig1, ax1 = plt.subplots(figsize=(10, 5))
                        ax1.bar(prob_df['C√≥digo'], prob_df['Probabilidad (%)'], color='skyblue')
                        ax1.set_ylabel('Probabilidad (%)')
                        ax1.set_title('Resultados del Diagn√≥stico')
                        plt.xticks(rotation=45)
                        st.pyplot(fig1)

                        # Mostrar matriz de confusi√≥n para el modelo seleccionado
                        st.subheader("üìä Matriz de Confusi√≥n del Modelo")
                        st.markdown(f"Matriz de confusi√≥n para el modelo {model_name} (datos de validaci√≥n)")
                        
                        # Crear visualizaci√≥n de la matriz de confusi√≥n
                        fig2, ax2 = plt.subplots(figsize=(10, 8))
                        sns.heatmap(confusion_matrices[model_name], 
                                   annot=True, 
                                   fmt='d', 
                                   cmap='Blues',
                                   xticklabels=CLASS_NAMES,
                                   yticklabels=CLASS_NAMES,
                                   ax=ax2)
                        ax2.set_xlabel('Predicci√≥n')
                        ax2.set_ylabel('Real')
                        ax2.set_title(f'Matriz de Confusi√≥n - {model_name}')
                        plt.xticks(rotation=45)
                        plt.yticks(rotation=0)
                        
                        # Preparar datos para el PDF
                        image_info = {
                            'size': f"{image.size[0]}x{image.size[1]}",
                            'format': uploaded_file.type
                        }
                        
                        prediction_results = {
                            'diagnosis': f"{CLASS_DESCRIPTIONS[predicted_class]} ({predicted_class})",
                            'confidence': confidence,
                            'probabilities': prob_df
                        }
                        
                        # Generar PDF en memoria
                        pdf_bytes = generate_pdf_bytes(
                            image_info=image_info,
                            model_name=model_name,
                            prediction_results=prediction_results,
                            confusion_matrix_img=fig2
                        )
                        
                        # Nombre del archivo con marca de tiempo
                        pdf_filename = f"diagnostico_{model_name}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
                        
                        # Forzar la descarga autom√°tica
                        auto_download_pdf(pdf_bytes, pdf_filename)
                        
                        plt.close(fig2)

                        # Informaci√≥n del modelo
                        st.markdown("### üß† Informaci√≥n del Modelo Seleccionado")
                        if model_name == 'CNN Simple':
                            st.markdown("""
                            **Arquitectura CNN Simple:**
                            - 3 capas convolucionales con MaxPooling
                            - Batch Normalization
                            - 1 capa densa de 256 neuronas
                            - Dropout 50%
                            - Activaci√≥n ReLU
                            """)
                            accuracy = 0.5913
                            training_time = 14939.95

                        elif model_name == 'CNN Optimizado':
                            st.markdown("""
                            **Arquitectura ResNet50 Optimizada:**
                            - ResNet50V2 preentrenada en ImageNet
                            - Fine-tuning con capas densas personalizadas
                            - Regularizaci√≥n y dropout
                            """)
                            accuracy = 0.5925
                            training_time = 25838.02

                        elif model_name == 'MobileNetV2 Base':
                            st.markdown("""
                            **MobileNetV2 Entrenado Base:**
                            - MobileNetV2 preentrenado (ImageNet)
                            - 5 √©pocas de entrenamiento base (sin fine-tuning)
                            - Precisi√≥n de validaci√≥n: 94.50%
                            """)
                            accuracy = 0.9450
                            training_time = 4255 * 5

                        col1, col2 = st.columns(2)
                        col1.metric("Precisi√≥n de Validaci√≥n", f"{accuracy*100:.2f}%")
                        col2.metric("‚è±Ô∏è Tiempo de Entrenamiento", f"{training_time/60:.2f} minutos")

                        st.markdown("---")

                        # Mostrar resultados de entrenamiento y comparaci√≥n
                        st.header("üìâ Resultados del Entrenamiento de los Modelos")
                        try:
                            training_plot_image = Image.open("./Graficos de entrenamiento de los modelos.png")
                            st.image(
                                training_plot_image,
                                caption="üìä Gr√°ficos del Entrenamiento (Accuracy & Loss)",
                                use_column_width=True
                            )
                        except Exception as e:
                            st.error(f"‚ùå No se pudo cargar la imagen del entrenamiento: {str(e)}")

                        # Tabla de comparaci√≥n de modelos
                        st.subheader("üìã Comparativa de Modelos")
                        comparison_data = {
                            "Modelo": ["CNN Simple", "ResNet50 Optimizado", "MobileNetV2 Base"],
                            "Precisi√≥n de Validaci√≥n": ["59.13%", "59.25%", "94.50%"],
                            "P√©rdida de Validaci√≥n": ["1.35", "1.09", "0.1683"],
                            "Tiempo de Entrenamiento": ["~4.15 h", "~7.18 h", "~5.91 h"]
                        }
                        comparison_df = pd.DataFrame(comparison_data)
                        st.dataframe(comparison_df)

                        # MCC y prueba de McNemar
                        st.subheader("üìà An√°lisis Estad√≠stico Inferencial")
                        
                        # Mostrar MCC para todos los modelos
                        st.markdown("#### Coeficiente de Correlaci√≥n de Matthews (MCC)")
                        mcc_df = pd.DataFrame({
                            "Modelo": list(mcc_results.keys()),
                            "MCC": [f"{val:.4f}" for val in mcc_results.values()]
                        })
                        st.dataframe(mcc_df)
                        st.markdown("""
                        **Interpretaci√≥n del MCC:**
                        - 1: Predicci√≥n perfecta
                        - 0: Predicci√≥n aleatoria
                        - -1: Predicci√≥n inversa
                        """)

                        # Mostrar prueba de McNemar
                        st.markdown("#### Prueba de McNemar (CNN Simple vs MobileNetV2 Base)")
                        st.table(mcnemar_results['table'])
                        st.markdown(f"**Estad√≠stico œá¬≤:** {mcnemar_results['chi2']:.4f}")
                        st.markdown(f"**p-valor:** {mcnemar_results['p_value']:.4f}")
                        
                        if mcnemar_results['p_value'] < 0.05:
                            st.success("**Resultado:** La diferencia en el rendimiento entre los modelos es estad√≠sticamente significativa (p < 0.05)")
                        else:
                            st.warning("**Resultado:** No hay evidencia suficiente para afirmar que existe una diferencia significativa en el rendimiento entre los modelos (p ‚â• 0.05)")

        else:
            st.warning("‚ö†Ô∏è No se pudieron cargar los modelos o las matrices de confusi√≥n.")
    except Exception as e:
        st.error(f"Error al procesar la imagen: {str(e)}")

# Sidebar con info del dataset
st.sidebar.markdown("---")
st.sidebar.header("üìö Informaci√≥n del Dataset")
st.sidebar.markdown("""
Este sistema fue entrenado con el dataset [NCT-CRC-HE-100K](https://zenodo.org/record/1214456):

- 100,000 im√°genes de tejido colon-rectal  
- 9 clases histol√≥gicas  
- Resoluci√≥n: 224√ó224 p√≠xeles
""")

# Footer
st.markdown("---")
st.markdown("""
**Nota importante:** Esta aplicaci√≥n est√° dise√±ada para asistir a profesionales m√©dicos,  
no debe ser utilizada como √∫nico criterio diagn√≥stico.  
Desarrollado con Streamlit y TensorFlow.
""")

# python -m streamlit run app.py