# app-matrizpre.py - Aplicaci√≥n Streamlit para diagn√≥stico de c√°ncer colon-rectal con soporte multilenguaje
import streamlit as st
import tensorflow as tf
import numpy as np
import cv2
from PIL import Image
import matplotlib.pyplot as plt
import pandas as pd
from tensorflow import keras
from sklearn.metrics import confusion_matrix, matthews_corrcoef, roc_curve, auc
from sklearn.preprocessing import label_binarize
from scipy.stats import chi2
import seaborn as sns
from fpdf import FPDF
from datetime import datetime
import tempfile
import os
import base64
from io import BytesIO
import json
from pathlib import Path
import random


# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Colorectal Cancer Diagnosis",
    layout="wide"
)

# Sistema de traducci√≥n
class TranslationService:
    def __init__(self):
        self.translations = self._load_translations()
    
    def _load_translations(self):
        # Puedes reemplazar esto con carga desde archivos JSON
        return {
            'en': {
                'title': 'ü©∫ Colorectal Cancer Diagnosis System',
                'description': 'This application uses deep learning models trained on Google Colab to analyze colorectal tissue images.',
                'upload_prompt': 'Upload a colorectal tissue image (JPEG, PNG)',
                'analyze_button': 'üöÄ Perform diagnosis',
                'analyzing': 'üî¨ Analyzing image...',
                'diagnosis': 'Diagnosis',
                'confidence': 'Confidence',
                'model_select': 'Select model to use',
                'report_title': 'Diagnosis Report',
                'model_info': 'Model Information',
                'training_results': 'Training Results',
                'statistical_analysis': 'Statistical Analysis',
                'class_probabilities': 'Class Probabilities',
                'waring_data':'Los datos de esta secci√≥n no varian, corresponden a las metricas de precision, perdida y tiempo obtenidos de google colab',
                'waring_matrix':'Esta es una matriz objetivo, es decir, como deber√≠a de verse para el modelo. Puedes generar una validacion en app2.py',
                'confusion_matrix': 'Confusion Matrix',
                'model_comparison': 'Model Comparison',
                'mcc': 'Matthews Correlation Coefficient',
                'mcnemar_test': 'McNemar Test',
                'download_report': 'Download PDF Report',
                'sidebar_title': 'Project Information',
                'sidebar_content': 'This system was trained with the [NCT-CRC-HE-100K](https://www.kaggle.com/datasets/imrankhan77/nct-crc-he-100k) dataset:',
                'footer_note': 'Important note: This application is designed to assist medical professionals and should not be used as the sole diagnostic criterion.',
                'classes': {
                    'ADI': 'Adipose tissue',
                    'BACK': 'Background',
                    'DEB': 'Debris',
                    'LYM': 'Lymphoid tissue',
                    'MUC': 'Mucosa',
                    'MUS': 'Muscle tissue',
                    'NORM': 'Normal tissue',
                    'STR': 'Stroma',
                    'TUM': 'Tumor (adenocarcinoma)'
                }
            },
            'es': {
                'title': 'ü©∫ Sistema de Diagn√≥stico de C√°ncer colon-rectal',
                'description': 'Esta aplicaci√≥n utiliza modelos de deep learning entrenados en Google Colab para analizar im√°genes de tejido colon-rectal.',
                'upload_prompt': 'Suba una imagen de tejido colon-rectal (JPEG, PNG)',
                'analyze_button': 'üöÄ Realizar diagn√≥stico',
                'analyzing': 'üî¨ Analizando imagen...',
                'diagnosis': 'Diagn√≥stico',
                'confidence': 'Confianza',
                'model_select': 'Seleccione el modelo a usar',
                'report_title': 'Reporte de Diagn√≥stico',
                'model_info': 'Informaci√≥n del Modelo',
                'training_results': 'Resultados de Entrenamiento',
                'statistical_analysis': 'An√°lisis Estad√≠stico',
                'class_probabilities': 'Probabilidades por Clase',
                'waring_data':'Los datos de esta secci√≥n no varian, corresponden a las metricas de precision, perdida y tiempo obtenidos de google colab',
                'waring_matrix':'Esta es una matriz objetivo, es decir, como deber√≠a de verse para el modelo. Puedes generar una validacion en app2.py',
                'confusion_matrix': 'Matriz de Confusi√≥n',
                'model_comparison': 'Comparaci√≥n de Modelos',
                'mcc': 'Coeficiente de Correlaci√≥n de Matthews',
                'mcnemar_test': 'Prueba de McNemar',
                'download_report': 'Descargar Reporte PDF',
                'sidebar_title': 'Informaci√≥n del proyecto',
                'sidebar_content': 'Este sistema fue entrenado con el dataset [NCT-CRC-HE-100K](https://www.kaggle.com/datasets/imrankhan77/nct-crc-he-100k):',
                'footer_note': 'Nota importante: Esta aplicaci√≥n est√° dise√±ada para asistir a profesionales m√©dicos y no debe ser utilizada como √∫nico criterio diagn√≥stico.',
                'classes': {
                    'ADI': 'Tejido adiposo',
                    'BACK': 'Fondo (background)',
                    'DEB': 'Detritos',
                    'LYM': 'Tejido linfoide',
                    'MUC': 'Mucosa',
                    'MUS': 'Tejido muscular',
                    'NORM': 'Tejido normal',
                    'STR': 'Estroma',
                    'TUM': 'Tumor (adenocarcinoma)'
                }
            },
            # A√±adir m√°s idiomas seg√∫n sea necesario
        }
    
    def get(self, key, lang, default=None):
        """Obtiene la traducci√≥n para una clave e idioma espec√≠fico"""
        try:
            # Manejo especial para las descripciones de clase
            if key in ['ADI', 'BACK', 'DEB', 'LYM', 'MUC', 'MUS', 'NORM', 'STR', 'TUM']:
                return self.translations.get(lang, {}).get('classes', {}).get(key, key)
            return self.translations.get(lang, {}).get(key, default or key)
        except Exception:
            return default or key

# Configuraci√≥n de idiomas disponibles
LANGUAGES = {
    'English': 'en',
    'Espa√±ol': 'es'
    # A√±adir m√°s idiomas seg√∫n sea necesario
}

# Inicializar el servicio de traducci√≥n
translator = TranslationService()

# Clases (ahora se manejan a trav√©s del sistema de traducci√≥n)
CLASS_NAMES = ['ADI', 'BACK', 'DEB', 'LYM', 'MUC', 'MUS', 'NORM', 'STR', 'TUM']

# Funci√≥n para calcular datos ROC reales a partir de matrices de confusi√≥n
def calculate_roc_from_confusion_matrix(conf_matrix, class_names):
    """
    Calcula los datos ROC (FPR, TPR, AUC) a partir de una matriz de confusi√≥n multiclase.
    Utiliza el m√©todo macro-average para combinar las curvas ROC de todas las clases.
    """
    try:
        n_classes = len(class_names)
        conf_matrix = np.array(conf_matrix)
        
        # Reconstruir y_true y y_pred a partir de la matriz de confusi√≥n
        y_true = []
        y_pred = []
        
        for true_class in range(n_classes):
            for pred_class in range(n_classes):
                count = conf_matrix[true_class, pred_class]
                y_true.extend([true_class] * count)
                y_pred.extend([pred_class] * count)
        
        y_true = np.array(y_true)
        y_pred = np.array(y_pred)
        
        # Binarizar las etiquetas para el c√°lculo de ROC multiclase
        y_true_bin = label_binarize(y_true, classes=range(n_classes))
        y_pred_bin = label_binarize(y_pred, classes=range(n_classes))
        
        # Calcular FPR, TPR y AUC para cada clase
        fpr = dict()
        tpr = dict()
        roc_auc = dict()
        
        for i in range(n_classes):
            if len(np.unique(y_true_bin[:, i])) > 1:  # Solo si hay ambas clases (0 y 1)
                fpr[i], tpr[i], _ = roc_curve(y_true_bin[:, i], y_pred_bin[:, i])
                roc_auc[i] = auc(fpr[i], tpr[i])
            else:
                # Si solo hay una clase, crear datos por defecto
                fpr[i] = np.array([0, 1])
                tpr[i] = np.array([0, 0])
                roc_auc[i] = 1
        
        # Calcular la curva ROC macro-average
        # Interpolar todas las curvas en un grid com√∫n
        mean_fpr = np.linspace(0, 1, 100)
        
        # Interpolar TPR para cada clase
        interp_tpr = []
        valid_aucs = []
        
        for i in range(n_classes):
            if len(fpr[i]) > 1:
                interp_tpr.append(np.interp(mean_fpr, fpr[i], tpr[i]))
                interp_tpr[-1][0] = 0.0  # Asegurar que empiece en (0,0)
                valid_aucs.append(roc_auc[i])
        
        # Calcular la media de los TPR interpolados
        if interp_tpr:
            mean_tpr = np.mean(interp_tpr, axis=0)
            mean_tpr[-1] = 1.0  # Asegurar que termine en (1,1)
            macro_auc = np.mean(valid_aucs)
        else:
            mean_tpr = np.linspace(0, 1, 100)
            macro_auc = 0.5
        
        return {
            'fpr': mean_fpr,
            'tpr': mean_tpr,
            'auc': macro_auc
        }
        
    except Exception as e:
        st.error(f"Error calculando ROC: {str(e)}")
        # Retornar datos por defecto en caso de error
        return {
            'fpr': np.linspace(0, 1, 100),
            'tpr': np.linspace(0, 1, 100),
            'auc': 0.5
        }

# Cargar modelos y usar matrices de confusi√≥n predefinidas
@st.cache_resource
def load_models_and_confusion_matrices():
    try:
        st.info("‚è≥ Cargando modelos y matrices de confusi√≥n predefinidas...")
        
        # Cargar modelos
        models = {
            'CNN Simple': keras.models.load_model('models/cnn_simple_model.h5'),
            'ResNet50V2': keras.models.load_model('models/resnet50.keras'),
            'MobileNetV2 Base': keras.models.load_model('models/mobilenetv2_base_only.h5'),
            'Hybrid Attention': keras.models.load_model('models/Fast_HybridAttention_final.h5'),
            'Hybrid Autoencoder': keras.models.load_model('models/Fast_HybridAutoencoder_final.h5')
        }
    except Exception as e:
        st.error(f"‚ùå Error cargando modelos: {str(e)}")
        return None, None, None, None, None
    #     # Matrices de confusi√≥n predefinidas con datos actualizados
    #     # Matriz precalculada; accuracies y loss basada en entrenamiento previo
    #     predefined_data = {
    #         "CNN Simple": {
    #             "confusion_matrix": [
    #                 [1309, 12, 6,   0,  9,   2,  0, 0, 0],
    #                 [0,   814, 4,   0,  0,  22,  0, 0, 7],
    #                 [5,   158, 25,  0,  0, 146,  1, 4, 0],
    #                 [1,    0,  25, 583,  3,  0,  22, 0, 0],
    #                 [218, 21,  9,   0,  226, 53, 16, 1,  491],
    #                 [0,   13,  97,  0,  0,  477,  1, 2,   2],
    #                 [10,  14,  46,  30, 201, 281, 97, 41, 21],
    #                 [0,   10,  28,  1,  22,  261, 30, 3,  66],
    #                 [9,   69,  35,  0,  43,  968, 19, 33, 52]
    #             ],
    #             "accuracy": 0.5913,  # 59.13%
    #             "loss": 1.35
    #         },
    #         "ResNet50V2": {
    #             "confusion_matrix": [
    #                 [1178, 50,  0,  1, 38,  42, 20, 0, 9],
    #                 [40, 800,   1,  0, 0,   5,  1,  0, 0],
    #                 [4, 0,   110, 33,  4,  10,  3, 16,  159],
    #                 [0, 0,    9,  578, 0,   1, 37,  0, 9],
    #                 [91, 3,  96,   1,  17, 615, 3, 78, 131],
    #                 [6,  0,  45,   1,  5,  255, 7, 19, 254],
    #                 [1, 1,   20,  37,  35, 19, 389, 0, 239],
    #                 [0,  4,  76,  16,  6,  105, 17, 22, 175],
    #                 [28, 6,  37,  7,  107, 105, 174, 17, 752]
    #             ],
    #             "accuracy": 0.5854,  # 59.25%
    #             "loss": 1.0915
    #         },
    #         "MobileNetV2 Base": {
    #             "confusion_matrix": [
    #                 [1295, 2, 3,  4,  5, 28,  0,   0,  1],
    #                 [2,  845, 0,  0,  0, 0,   0,   0,  0],
    #                 [0,   1, 299, 2,  0, 34,  0,   0,  3],
    #                 [0,   0, 14, 616, 0,  1,  2,   0,  1],
    #                 [18, 19, 5,   0, 933, 15, 5,  37,  3],
    #                 [0,   0, 2,  10, 4, 449,  0, 126,  1],
    #                 [0,   0, 0,  11, 2,  2, 699,   2, 25],
    #                 [0,   0, 4,   1, 8,  94,  2, 299, 13],
    #                 [0,   0, 15, 18, 13, 10, 31,  15, 1131]
    #             ],
    #             "accuracy": 0.9450,  # 94.50%
    #             "loss": 0.1683
    #         },
    #         "Hybrid Attention": {
    #             "confusion_matrix": [
    #                 [0, 0, 0, 0, 0, 0, 0, 0, 1338],
    #                 [0, 0, 0, 0, 0, 0, 0, 0, 847],
    #                 [0, 0, 0, 0, 0, 0, 0, 0, 339],
    #                 [0, 0, 0, 0, 0, 0, 0, 0, 634],
    #                 [0, 0, 0, 0, 0, 0, 0, 0, 1035],
    #                 [0, 0, 0, 0, 0, 0, 0, 0, 592],
    #                 [0, 0, 0, 0, 0, 0, 0, 0, 741],
    #                 [0, 0, 0, 0, 0, 0, 0, 0, 421],
    #                 [0, 0, 0, 0, 0, 0, 0, 0, 1233]
    #             ],
    #             "accuracy": 0.1450,  # 14.50%
    #             "loss": 1.9310
    #         },
    #         "Hybrid Autoencoder": {
    #             "confusion_matrix": [
    #                 [0, 0, 0, 0, 0, 0, 0, 0, 1338],
    #                 [0, 0, 0, 0, 0, 0, 0, 0, 847],
    #                 [0, 0, 0, 0, 0, 0, 0, 0, 339],
    #                 [0, 0, 0, 0, 0, 0, 0, 0, 634],
    #                 [0, 0, 0, 0, 0, 0, 0, 0, 1035],
    #                 [0, 0, 0, 0, 0, 0, 0, 0, 592],
    #                 [0, 0, 0, 0, 0, 0, 0, 0, 741],
    #                 [0, 0, 0, 0, 0, 0, 0, 0, 421],
    #                 [0, 0, 0, 0, 0, 0, 0, 0, 1233]
    #             ],
    #             "accuracy": 0.1500,  # 15.00%
    #             "loss": 1.8970
    #         }
    #     }
        
    #     # Extraer matrices de confusi√≥n y accuracies
    #     confusion_matrices = {}
    #     accuracies = {}
    #     losses = {}
        
    #     for model_name in models.keys():
    #         confusion_matrices[model_name] = np.array(predefined_data[model_name]["confusion_matrix"])
    #         accuracies[model_name] = predefined_data[model_name]["accuracy"]
            
    #         # Usar p√©rdida real de los datos proporcionados
    #         losses[model_name] = predefined_data[model_name]["loss"]
        
    #     # Calcular datos ROC a partir de las matrices de confusi√≥n predefinidas
    #     roc_data = {}
    #     for model_name, conf_matrix in confusion_matrices.items():
    #         roc_data[model_name] = calculate_roc_from_confusion_matrix(conf_matrix, CLASS_NAMES)
        
    #     st.success("‚úÖ Modelos y matrices de confusi√≥n cargados exitosamente!")
    #     return models, confusion_matrices, roc_data, accuracies, losses
        
    # except Exception as e:
    #     st.error(f"‚ùå Error loading models or confusion matrices: {str(e)}")
    #     return None, None, None, None, None
     

# Funci√≥n para calcular el coeficiente de Matthews
def calculate_mcc(conf_matrix):
    """Calcula el MCC correctamente a partir de una matriz de confusi√≥n."""
    conf_matrix = np.array(conf_matrix, dtype=int)  # Asegurar que es entera
    n_classes = conf_matrix.shape[0]
    
    # Generar y_true y y_pred a partir de la matriz de confusi√≥n
    y_true = []
    y_pred = []
    for i in range(n_classes):
        for j in range(n_classes):
            y_true.extend([i] * conf_matrix[i, j])  # Clase real
            y_pred.extend([j] * conf_matrix[i, j])  # Clase predicha
    
    # Calcular MCC usando sklearn (m√°s robusto)
    return matthews_corrcoef(y_true, y_pred)

# Funci√≥n para realizar la prueba de McNemar
def perform_mcnemar_test(conf_matrix1, conf_matrix2):
    correct1 = np.diag(conf_matrix1).sum()
    incorrect1 = conf_matrix1.sum() - correct1
    
    correct2 = np.diag(conf_matrix2).sum()
    incorrect2 = conf_matrix2.sum() - correct2
    
    b = incorrect1 - (conf_matrix1.sum() - correct2)
    c = incorrect2 - (conf_matrix2.sum() - correct1)
    
    b = max(0, b)
    c = max(0, c)
     
    chi2_stat = (abs(b - c) - 1)**2 / (b + c) if (b + c) > 0 else 0
    p_value = 1 - chi2.cdf(chi2_stat, 1)
    
    return {
        'table': [
            ["", "MobileNetV2 Correct", "MobileNetV2 Incorrect"],
            ["CNN Simple Correct", correct1, b],
            ["Simple Incorrect", c, incorrect1]
        ],
        'chi2': chi2_stat,
        'p_value': p_value
    }

# Clase para generar reportes PDF con soporte multilenguaje
class PDFReport(FPDF):
    def __init__(self, language='en'):
        super().__init__()
        self.language = language
        self.set_font('Arial', '', 12)
        
        # Textos para el reporte PDF
        self.pdf_texts = {
            'report_title': {
                'en': 'Colorectal Cancer Diagnosis Report',
                'es': 'Reporte de Diagn√≥stico de C√°ncer Colon-rectal'
            },
            'summary': {
                'en': 'Summary',
                'es': 'Resumen'
            },
            'graphs': {
                'en': 'Graphs and Visualizations',
                'es': 'Gr√°ficos y Visualizaciones'
            },
            'analysis': {
                'en': 'Statistical Analysis',
                'es': 'An√°lisis Estad√≠stico'
            },
            'conclusion': {
                'en': 'Conclusion and Recommendations',
                'es': 'Conclusi√≥n y Recomendaciones'
            },
            'date': {
                'en': 'Date:',
                'es': 'Fecha:'
            },
            'model_used': {
                'en': 'Model used:',
                'es': 'Modelo utilizado:'
            },
            'analyzed_image': {
                'en': 'Analyzed image:',
                'es': 'Imagen analizada:'
            },
            'size': {
                'en': 'Size:',
                'es': 'Tama√±o:'
            },
            'format': {
                'en': 'Format:',
                'es': 'Formato:'
            },
            'diagnosis_results': {
                'en': 'Diagnosis results:',
                'es': 'Resultados del diagn√≥stico:'
            },
            'diagnosis': {
                'en': 'Diagnosis:',
                'es': 'Diagn√≥stico:'
            },
            'confidence': {
                'en': 'Confidence:',
                'es': 'Confianza:'
            },
            'class_probabilities': {
                'en': 'Class probabilities:',
                'es': 'Probabilidades por clase:'
            },
            'class': {
                'en': 'Class',
                'es': 'Clase'
            },
            'code': {
                'en': 'Code',
                'es': 'C√≥digo'
            },
            'probability': {
                'en': 'Probability (%)',
                'es': 'Probabilidad (%)'
            },
            'model_comparison': {
                'en': 'Model comparison',
                'es': 'Comparaci√≥n de modelos'
            },
            'model': {
                'en': 'Model',
                'es': 'Modelo'
            },
            'val_accuracy': {
                'en': 'Validation Accuracy',
                'es': 'Precisi√≥n de Validaci√≥n'
            },
            'val_loss': {
                'en': 'Validation Loss',
                'es': 'P√©rdida de Validaci√≥n'
            },
            'training_time': {
                'en': 'Training Time',
                'es': 'Tiempo de Entrenamiento'
            },
            'mcc': {
                'en': 'Matthews Correlation Coefficient (MCC)',
                'es': 'Coeficiente de Correlaci√≥n de Matthews (MCC)'
            },
            'mcnemar_test': {
                'en': 'McNemar Test',
                'es': 'Prueba de McNemar'
            },
            'roc_curve': {
                'en': 'ROC Curve',
                'es': 'Curva ROC'
            },
            'auc': {
                'en': 'Area Under Curve (AUC)',
                'es': '√Årea Bajo la Curva (AUC)'
            },
            'average_metrics': {
                'en': 'Average Metrics',
                'es': 'M√©tricas Promedio'
            },
            'accuracy': {
                'en': 'Accuracy',
                'es': 'Precisi√≥n'
            },
            'best_model': {
                'en': 'Recommended Model',
                'es': 'Modelo Recomendado'
            },
            'reason': {
                'en': 'Reason:',
                'es': 'Raz√≥n:'
            },
            'note': {
                'en': 'Note: This report has been automatically generated by the assisted diagnosis system. Results should be interpreted by a qualified medical professional.',
                'es': 'Nota: Este reporte ha sido generado autom√°ticamente por el sistema de diagn√≥stico asistido. Los resultados deben ser interpretados por un profesional m√©dico cualificado.'
            },
            'statistically_significant': {
                'en': 'Statistically significant difference (p < 0.05)',
                'es': 'Diferencia estad√≠sticamente significativa (p < 0.05)'
            },
            'not_statistically_significant': {
                'en': 'No statistically significant difference (p ‚â• 0.05)',
                'es': 'No hay diferencia estad√≠sticamente significativa (p ‚â• 0.05)'
            }
        }
    
    def t(self, key):
        """Obtiene la traducci√≥n para una clave espec√≠fica"""
        return self.pdf_texts.get(key, {}).get(self.language, key)

    def header(self):
        self.set_font('Arial', 'B', 16)
        self.cell(0, 10, self.t('report_title'), 0, 1, 'C')
        self.ln(10)

    def footer(self):
        self.set_y(-15)
        self.set_font('Arial', 'I', 8)
        self.cell(0, 10, f'Page {self.page_no()}', 0, 0, 'C')
    
    def add_cover_page(self, model_name):
        self.add_page()
        self.set_font('Arial', 'B', 24)
        self.cell(0, 40, self.t('report_title'), 0, 1, 'C')
        self.ln(20)
        
        self.set_font('Arial', '', 16)
        self.cell(0, 10, f"{self.t('model_used')} {model_name}", 0, 1, 'C')
        self.ln(15)
        
        self.set_font('Arial', '', 14)
        self.cell(0, 10, f"{self.t('date')} {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", 0, 1, 'C')
    
    def add_summary_section(self, image_info, prediction_results, avg_auc, avg_accuracy):
        self.add_page()
        self.set_font('Arial', 'B', 16)
        self.cell(0, 10, self.t('summary'), 0, 1)
        self.ln(10)
        
        # Informaci√≥n de la imagen
        self.set_font('Arial', 'B', 12)
        self.cell(0, 10, self.t('analyzed_image'), 0, 1)
        self.set_font('Arial', '', 12)
        self.cell(0, 10, f"{self.t('size')} {image_info['size']}", 0, 1)
        self.cell(0, 10, f"{self.t('format')} {image_info['format']}", 0, 1)
        self.ln(5)
        
        # Resultados del diagn√≥stico
        self.set_font('Arial', 'B', 12)
        self.cell(0, 10, self.t('diagnosis_results'), 0, 1)
        self.set_font('Arial', '', 12)
        self.cell(0, 10, f"{self.t('diagnosis')} {prediction_results['diagnosis']}", 0, 1)
        self.cell(0, 10, f"{self.t('confidence')} {prediction_results['confidence']:.2f}%", 0, 1)
        self.ln(10)
        
        # M√©tricas promedio
        self.set_font('Arial', 'B', 12)
        self.cell(0, 10, self.t('average_metrics'), 0, 1)
        self.set_font('Arial', '', 12)
        self.cell(0, 10, f"{self.t('auc')}: {avg_auc:.2f}", 0, 1)
        self.cell(0, 10, f"{self.t('accuracy')}: {avg_accuracy:.2f}%", 0, 1)
        self.ln(15)
        
        # Probabilidades por clase (tabla)
        self.set_font('Arial', 'B', 12)
        self.cell(0, 10, self.t('class_probabilities'), 0, 1)
        
        col_widths = [60, 30, 30]
        self.set_font('Arial', 'B', 10)
        self.cell(col_widths[0], 10, self.t('class'), 1)
        self.cell(col_widths[1], 10, self.t('code'), 1)
        self.cell(col_widths[2], 10, self.t('probability'), 1)
        self.ln()
        
        self.set_font('Arial', size=10)
        for idx, row in prediction_results['probabilities'].iterrows():
            self.cell(col_widths[0], 10, str(row['Clase']), 1)
            self.cell(col_widths[1], 10, str(row['C√≥digo']), 1)
            self.cell(col_widths[2], 10, f"{row['Probabilidad (%)']:.2f}", 1)
            self.ln()
    
    def add_graphs_section(self, confusion_matrix_img, roc_curve_img, roc_comparison_img):
        self.add_page()
        self.set_font('Arial', 'B', 16)
        self.cell(0, 10, self.t('graphs'), 0, 1)
        self.ln(10)
        
        # Matriz de confusi√≥n
        if confusion_matrix_img:
            self.set_font('Arial', 'B', 12)
            self.cell(0, 10, self.t('confusion_matrix'), 0, 1)
            self.ln(5)
            
            temp_img = os.path.join(tempfile.mkdtemp(), "confusion_matrix.png")
            confusion_matrix_img.savefig(temp_img, bbox_inches='tight', dpi=150)
            self.image(temp_img, x=20, w=170)
            self.ln(10)
        
        # Curva ROC individual
        if roc_curve_img:
            self.set_font('Arial', 'B', 12)
            self.cell(0, 10, f"{self.t('roc_curve')} ({self.t('auc')})", 0, 1)
            self.ln(5)
            
            temp_img = os.path.join(tempfile.mkdtemp(), "roc_curve.png")
            roc_curve_img.savefig(temp_img, bbox_inches='tight', dpi=150)
            self.image(temp_img, x=20, w=170)
            self.ln(10)
        
        # Comparaci√≥n de curvas ROC
        if roc_comparison_img:
            self.set_font('Arial', 'B', 12)
            self.cell(0, 10, f"{self.t('roc_curve')} - {self.t('model_comparison')}", 0, 1)
            self.ln(5)
            
            temp_img = os.path.join(tempfile.mkdtemp(), "roc_comparison.png")
            roc_comparison_img.savefig(temp_img, bbox_inches='tight', dpi=150)
            self.image(temp_img, x=20, w=170)
            self.ln(10)
    
    def add_analysis_section(self, mcc_results, mcnemar_results):
        self.add_page()
        self.set_font('Arial', 'B', 16)
        self.cell(0, 10, self.t('analysis'), 0, 1)
        self.ln(10)
        
        # Resultados MCC
        self.set_font('Arial', 'B', 12)
        self.cell(0, 10, self.t('mcc'), 0, 1)
        self.ln(5)
        
        self.set_font('Arial', 'B', 10)
        self.cell(60, 10, self.t('model'), 1)
        self.cell(40, 10, "MCC", 1)
        self.ln()
        
        self.set_font('Arial', size=10)
        for model_name, mcc in mcc_results.items():
            self.cell(60, 10, model_name, 1)
            self.cell(40, 10, f"{mcc:.4f}", 1)
            self.ln()
        
        self.ln(10)
        
        # Prueba de McNemar
        self.set_font('Arial', 'B', 12)
        self.cell(0, 10, self.t('mcnemar_test'), 0, 1)
        self.ln(5)
        
        if mcnemar_results:
            # Tabla de contingencia
            self.set_font('Arial', 'B', 10)
            self.cell(60, 10, "", 1)
            self.cell(60, 10, "MobileNetV2 Correct", 1)
            self.cell(60, 10, "MobileNetV2 Incorrect", 1)
            self.ln()
            
            self.set_font('Arial', size=10)
            self.cell(60, 10, "CNN Simple Correct", 1)
            self.cell(60, 10, str(mcnemar_results['table'][1][1]), 1)
            self.cell(60, 10, str(mcnemar_results['table'][1][2]), 1)
            self.ln()
            
            self.cell(60, 10, "CNN Simple Incorrect", 1)
            self.cell(60, 10, str(mcnemar_results['table'][2][1]), 1)
            self.cell(60, 10, str(mcnemar_results['table'][2][2]), 1)
            self.ln()
            
            self.ln(5)
            
            # Resultados estad√≠sticos
            self.set_font('Arial', '', 10)
            self.cell(0, 10, f"Chi-squared statistic: {mcnemar_results['chi2']:.4f}", 0, 1)
            self.cell(0, 10, f"p-value: {mcnemar_results['p_value']:.4f}", 0, 1)
            
            if mcnemar_results['p_value'] < 0.05:
                self.cell(0, 10, self.t('statistically_significant'), 0, 1)
            else:
                self.cell(0, 10, self.t('not_statistically_significant'), 0, 1)
    
    def add_conclusion_section(self, best_model, reason):
        self.add_page()
        self.set_font('Arial', 'B', 16)
        self.cell(0, 10, self.t('conclusion'), 0, 1)
        self.ln(10)
        
        self.set_font('Arial', 'B', 14)
        self.cell(0, 10, f"{self.t('best_model')}: {best_model}", 0, 1)
        self.ln(5)
        
        self.set_font('Arial', '', 12)
        self.cell(0, 10, f"{self.t('reason')} {reason}", 0, 1)
        self.ln(10)
        
        # Nota importante
        self.set_font('Arial', 'I', 10)
        self.multi_cell(0, 5, self.t('note'))

# Funci√≥n para generar PDF en memoria
def generate_pdf_bytes(image_info, model_name, prediction_results, 
                      confusion_matrix_img=None, roc_curve_img=None, roc_comparison_img=None,
                      mcc_results=None, mcnemar_results=None, language='en'):
    pdf = PDFReport(language=language)
    
    # Calcular m√©tricas promedio (ejemplo)
    avg_auc = 0.85  # Esto deber√≠a calcularse de tus datos reales
    avg_accuracy = 89.5  # Esto deber√≠a calcularse de tus datos reales
    
    # 1. Portada
    pdf.add_cover_page(model_name)
    
    # 2. Resumen
    pdf.add_summary_section(image_info, prediction_results, avg_auc, avg_accuracy)
    
    # 3. Gr√°ficos
    pdf.add_graphs_section(confusion_matrix_img, roc_curve_img, roc_comparison_img)
    
    # 4. An√°lisis estad√≠stico
    if mcc_results and mcnemar_results:
        pdf.add_analysis_section(mcc_results, mcnemar_results)
    
    # 5. Conclusi√≥n
    best_model = "MobileNetV2 Base"
    reason = {
        'en': "This model showed the highest accuracy (94.5%) and AUC (0.96) in validation tests, with statistically significant improvements over other models.",
        'es': "Este modelo mostr√≥ la mayor precisi√≥n (94.5%) y AUC (0.96) en las pruebas de validaci√≥n, con mejoras estad√≠sticamente significativas sobre otros modelos."
    }.get(language)
    pdf.add_conclusion_section(best_model, reason)
    
    # Guardar PDF en bytes
    pdf_bytes = pdf.output(dest='S').encode('latin1') if isinstance(pdf.output(dest='S'), str) else bytes(pdf.output(dest='S'))
    return pdf_bytes

# Funci√≥n para forzar descarga autom√°tica
def auto_download_pdf(pdf_bytes, filename):
    b64 = base64.b64encode(pdf_bytes).decode()
    href = f'<a href="data:application/pdf;base64,{b64}" download="{filename}" id="auto-download">Download PDF</a>'
    st.markdown(href, unsafe_allow_html=True)
    
    js = f"""
    <script>
        document.getElementById('auto-download').click();
        setTimeout(function() {{
            var element = document.getElementById('auto-download');
            element.parentNode.removeChild(element);
        }}, 1000);
    </script>
    """
    st.components.v1.html(js)

# Preprocesamiento de im√°genes
def preprocess_image(image, model_name=None):
    try:
        # Determinar el tama√±o objetivo basado en el modelo
        target_size = (96, 96) if model_name in ['Hybrid Attention', 'Hybrid Autoencoder'] else (224, 224)
        
        image = np.array(image)
        if len(image.shape) == 2:
            image = cv2.cvtColor(image, cv2.COLOR_GRAY2RGB)
        elif image.shape[2] == 4:
            image = image[:, :, :3]
        image = cv2.resize(image, target_size)
        image = image / 255.0
        return np.expand_dims(image, axis=0)
    except Exception as e:
        st.error(f"Error processing image: {str(e)}")
        return None

# Funci√≥n principal
def main():
    # Selector de idioma
    lang = st.sidebar.selectbox("Language/Idioma", list(LANGUAGES.keys()))
    current_lang = LANGUAGES[lang]
    t = lambda key: translator.get(key, current_lang)
    
    # Configuraci√≥n del men√∫ "About" seg√∫n idioma
    about_text = {
        'en': "Application for assisted diagnosis of colorectal cancer using deep learning",
        'es': "Aplicaci√≥n para diagn√≥stico asistido de c√°ncer colon-rectal usando deep learning"
    }.get(current_lang, "Colorectal cancer diagnosis application")
    
    # T√≠tulo y descripci√≥n
    st.title(t('title'))
    st.markdown(t('description'))
    
    # Cargar modelos y m√©tricas
    models, confusion_matrices, roc_data, accuracies, losses = load_models_and_confusion_matrices()
    
    # Calcular m√©tricas estad√≠sticas
    if models and confusion_matrices and accuracies and losses:
        mcc_results = {}
        for model_name, conf_matrix in confusion_matrices.items():
            mcc_results[model_name] = calculate_mcc(conf_matrix)
        
        mcnemar_results = perform_mcnemar_test(
            confusion_matrices['CNN Simple'], 
            confusion_matrices['MobileNetV2 Base'],
        )
    
    # Carga de imagen
    st.header("üîç " + t('diagnosis'))
    uploaded_file = st.file_uploader(
        t('upload_prompt'),
        type=["jpg", "jpeg", "png"]
    )

    if uploaded_file is not None:
        # Validar tama√±o del archivo (m√°ximo 10MB)
        if uploaded_file.size > 10 * 1024 * 1024:
            st.error("‚ùå El archivo es demasiado grande. M√°ximo 10MB permitido.")
            return
            
        try:
            image = Image.open(uploaded_file)
            st.image(image, caption=t('uploaded_image'), use_column_width=True)

            if models and confusion_matrices and roc_data and accuracies and losses:
                model_name = st.selectbox(t('model_select'), list(models.keys()))
                model = models[model_name]

                if st.button(t('analyze_button')):
                    with st.spinner(t('analyzing')):
                        processed_image = preprocess_image(image, model_name=model_name)

                        if processed_image is not None:
                            # Ahora todos los modelos usan .predict() ya que ResNet50V2 es un archivo .keras
                            prediction = model.predict(processed_image, verbose=0)

                            predicted_class = CLASS_NAMES[np.argmax(prediction)]
                            confidence = np.max(prediction) * 100
                            class_description = t(predicted_class)

                            st.success(f"""
                            **{t('diagnosis')}:** {class_description} ({predicted_class})  
                            **{t('confidence')}:** {confidence:.2f}%
                            """)
                            
                            # Tabla de probabilidades
                            st.subheader("üìä " + t('class_probabilities'))
                            prob_df = pd.DataFrame({
                                'Clase': [t(cn) for cn in CLASS_NAMES],
                                'C√≥digo': CLASS_NAMES,
                                'Probabilidad (%)': [p * 100 for p in prediction[0]]
                            }).sort_values('Probabilidad (%)', ascending=False)

                            st.dataframe(
                                prob_df.style.format({'Probabilidad (%)': '{:.2f}'}),
                                hide_index=True,
                                use_container_width=True
                            )


                            # Gr√°fico de probabilidades
                            st.subheader("üìà " + t('class_probabilities'))
                            fig1, ax1 = plt.subplots(figsize=(10, 5))
                            ax1.bar(prob_df['C√≥digo'], prob_df['Probabilidad (%)'], color='skyblue')
                            ax1.set_ylabel(t('probability'))
                            ax1.set_title(t('class_probabilities'))
                            plt.xticks(rotation=45)
                            st.pyplot(fig1)

                            # Mostrar matriz de confusi√≥n
                            st.subheader("üìä " + t('confusion_matrix'))
                            st.markdown(f"{t('confusion_matrix')} {model_name} ({t('validation_data')})")
                            st.warning(t('waring_data'))
                            st.warning(t('waring_matrix'))
                            
                            fig2, ax2 = plt.subplots(figsize=(10, 8))
                            sns.heatmap(confusion_matrices[model_name], 
                                        annot=True, 
                                        fmt='d', 
                                        cmap='Blues',
                                        xticklabels=CLASS_NAMES,
                                        yticklabels=CLASS_NAMES,
                                        ax=ax2)
                            ax2.set_xlabel(t('prediction'))
                            ax2.set_ylabel(t('actual'))
                            ax2.set_title(f"{t('confusion_matrix')} - {model_name}")
                            plt.xticks(rotation=45)
                            plt.yticks(rotation=0)
                            
                            # Mostrar curva ROC y AUC
                            st.subheader("üìà ROC Curve & AUC")
                            fig_roc, ax_roc = plt.subplots(figsize=(8, 6))
                            
                            # Dibujar la curva ROC para el modelo seleccionado
                            ax_roc.plot(roc_data[model_name]['fpr'], 
                                      roc_data[model_name]['tpr'], 
                                      color='darkorange',
                                      lw=2,
                                      label=f'ROC curve (AUC = {roc_data[model_name]["auc"]:.4f})')
                            
                            # L√≠nea de referencia (clasificador aleatorio)
                            ax_roc.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
                            
                            ax_roc.set_xlim([0.0, 1.0])
                            ax_roc.set_ylim([0.0, 1.05])
                            ax_roc.set_xlabel('False Positive Rate')
                            ax_roc.set_ylabel('True Positive Rate')
                            ax_roc.set_title(f'ROC Curve - {model_name}')
                            ax_roc.legend(loc="lower right")
                            
                            st.pyplot(fig_roc)
                            
                            # Mostrar comparativa de curvas ROC para todos los modelos
                            st.subheader("üìä ROC Curves Comparison")
                            fig_roc_all, ax_roc_all = plt.subplots(figsize=(10, 8))
                            
                            # Dibujar todas las curvas ROC
                            for model_name_roc, data in roc_data.items():
                                ax_roc_all.plot(data['fpr'], 
                                                data['tpr'], 
                                                lw=2,
                                                label=f'{model_name_roc} (AUC = {data["auc"]:.4f})')
                            
                            # L√≠nea de referencia
                            ax_roc_all.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
                            
                            ax_roc_all.set_xlim([0.0, 1.0])
                            ax_roc_all.set_ylim([0.0, 1.05])
                            ax_roc_all.set_xlabel('False Positive Rate')
                            ax_roc_all.set_ylabel('True Positive Rate')
                            ax_roc_all.set_title('ROC Curves Comparison')
                            ax_roc_all.legend(loc="lower right")
                            
                            st.pyplot(fig_roc_all)
                            
                            # Preparar datos para el PDF
                            image_info = {
                                'size': f"{image.size[0]}x{image.size[1]}",
                                'format': uploaded_file.type
                            }
                            
                            prediction_results = {
                                'diagnosis': f"{class_description} ({predicted_class})",
                                'confidence': confidence,
                                'probabilities': prob_df
                            }
                            
                            # Generar PDF en memoria
                            pdf_bytes = generate_pdf_bytes(
                                image_info=image_info,
                                model_name=model_name,
                                prediction_results=prediction_results,
                                confusion_matrix_img=fig2,
                                roc_curve_img=fig_roc,
                                roc_comparison_img=fig_roc_all,
                                mcc_results=mcc_results,
                                mcnemar_results=mcnemar_results,
                                language=current_lang
                            )
                            
                            # Nombre del archivo con marca de tiempo
                            pdf_filename = f"diagnosis_{model_name}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
                            
                            # Bot√≥n de descarga
                            st.download_button(
                                label=t('download_report'),
                                data=pdf_bytes,
                                file_name=pdf_filename,
                                mime='application/pdf'
                            )

                            plt.close(fig2)
                            plt.close(fig_roc)
                            plt.close(fig_roc_all)

                            # Informaci√≥n del modelo
                            st.markdown(f"### üß† {t('model_info')}")
                            # Obtener accuracy real del modelo actual
                            accuracy = accuracies[model_name]
                            loss = losses[model_name]

                            if model_name == 'CNN Simple':
                                st.markdown(f"""
                                **{t('simple_cnn_architecture')}:**
                                - 3 {t('convolutional_layers')} {t('with_maxpooling')}
                                - {t('batch_normalization')}
                                - 1 {t('dense_layer')} 256 {t('neurons')}
                                - Dropout 50%
                                - {t('relu_activation')}
                                - {t('validation_loss')}: {loss:.4f}
                                """)
                                training_time = 14939.95

                            elif model_name == 'ResNet50V2':
                                st.markdown(f"""
                                **{t('optimized_resnet_architecture')}:**
                                - ResNet50V2 {t('pretrained_on_imagenet')}
                                - {t('fine_tuning_with_custom_dense_layers')}
                                - {t('regularization_and_dropout')}
                                - {t('validation_loss')}: {loss:.4f}
                                """)
                                training_time = 24698.07

                            elif model_name == 'MobileNetV2 Base':
                                st.markdown(f"""
                                **{t('mobilenetv2_base_trained')}:**
                                - MobileNetV2 {t('pretrained_on_imagenet')}
                                - 5 {t('training_epochs')} ({t('no_fine_tuning')})
                                - {t('validation_loss')}: {loss:.4f}
                                """)
                                training_time = 4255 * 5
                            
                            elif model_name == 'Hybrid Attention':
                                st.markdown(f"""
                                **{t('hybrid_attention_architecture')}:**
                                - Arquitectura h√≠brida con mecanismos de atenci√≥n
                                - Combina CNN con capas de atenci√≥n
                                - {t('validation_loss')}: {loss:.4f}
                                """)
                                training_time = 14400
                            
                            elif model_name == 'Hybrid Autoencoder':
                                st.markdown(f"""
                                **{t('hybrid_autoencoder_architecture')}:**
                                - Arquitectura h√≠brida con autoencoder
                                - Combina CNN con componentes de autoencoder
                                - {t('validation_loss')}: {loss:.4f}
                                """)
                                training_time = 14400

                            col1, col2 = st.columns(2)
                            col1.metric(t('validation_accuracy'), f"{accuracy*100:.2f}%")
                            col2.metric("‚è±Ô∏è " + t('training_time'), f"{training_time/60:.2f} {t('minutes')}")

                            st.markdown("---")

                            # Mostrar resultados de entrenamiento y comparaci√≥n
                            st.header("üìâ " + t('training_results'))
                            try:
                                training_plot_image = Image.open("./Graficos de entrenamiento de los modelos.png")
                                st.image(
                                    training_plot_image,
                                    caption="üìä " + t('training_plots'),
                                    use_container_width=True
                                )
                            except Exception as e:
                                st.error(f"‚ùå {t('error_loading_training_image')}: {str(e)}")

                            # Tabla de comparaci√≥n de modelos
                            st.subheader("üìã " + t('model_comparison'))
                            comparison_data = {
                                t('model'): list(accuracies.keys()),
                                t('validation_accuracy'): [f"{acc*100:.2f}%" for acc in accuracies.values()],
                                t('validation_loss'): [f"{loss:.4f}" for loss in losses.values()],
                                t('training_time'): [
                                    "~4.15 h",  # CNN Simple
                                    "~7.18 h",  # ResNet50V2
                                    "~5.91 h",  # MobileNetV2
                                    "~4.00 h",  # Hybrid Attention
                                    "~4.00 h"   # Hybrid Autoencoder
                                ]
                            }
                            comparison_df = pd.DataFrame(comparison_data)
                            st.dataframe(comparison_df)

                            # MCC y prueba de McNemar
                            st.subheader("üìà " + t('statistical_analysis'))
                            
                            # Mostrar MCC para todos los modelos
                            st.markdown(f"#### {t('mcc')}")
                            mcc_df = pd.DataFrame({
                                t('model'): list(mcc_results.keys()),
                                'MCC': [f"{val:.4f}" for val in mcc_results.values()]
                            })
                            st.dataframe(mcc_df)
                            st.markdown(f"""
                            **{t('mcc_interpretation')}:**
                            - 1: {t('perfect_prediction')}
                            - 0: {t('random_prediction')}
                            - -1: {t('inverse_prediction')}
                            """)

                            # Mostrar prueba de McNemar
                            st.markdown(f"#### {t('mcnemar_test')}")
                            st.table(mcnemar_results['table'])
                            st.markdown(f"**{t('chi2_statistic')}:** {mcnemar_results['chi2']:.4f}")
                            st.markdown(f"**{t('p_value')}:** {mcnemar_results['p_value']:.4f}")
                            
                            if mcnemar_results['p_value'] < 0.05:
                                st.success(f"**{t('result')}:** {t('statistically_significant_difference')} (p < 0.05)")
                            else:
                                st.warning(f"**{t('result')}:** {t('no_statistically_significant_difference')} (p ‚â• 0.05)")

            else:
                st.warning("‚ö†Ô∏è " + t('error_loading_models'))
        except Exception as e:
            st.error(f"{t('error_processing_image')}: {str(e)}")

    # Sidebar con info del dataset
    st.sidebar.markdown("---")
    st.sidebar.header(f"üìö {t('sidebar_title')}")
    st.sidebar.markdown(t('sidebar_content') + """
- 100,000 im√°genes de tejido colon-rectal  
- 9 clases histol√≥gicas
- Resoluci√≥n: 224√ó224 p√≠xeles

El codigo utilizado para entrenar los modelos se encuentra en Google colab (https://colab.research.google.com/drive/1jsgGq9226_Uhnj0ZtFHIWjZolRxmxmG7?usp=sharing)
                    
Este proyecto a sido subido a GitHub, el cual se encuentra en este enlace: (https://github.com/Anthony140823/Deteccion-cancer-colorrectal-IA.git)
""")

    # Footer
    st.markdown("---")
    st.markdown(f"**{t('important_note')}:** {t('footer_note')}")

if __name__ == "__main__":
    main()
# python -m streamlit run app.py
